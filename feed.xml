<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://madeindra.dev/feed.xml" rel="self" type="application/atom+xml" /><link href="https://madeindra.dev/" rel="alternate" type="text/html" /><updated>2025-01-05T15:47:35+00:00</updated><id>https://madeindra.dev/feed.xml</id><title type="html">madeindra.dev</title><subtitle>A blog by Made Indra sharing insights, tutorials, and stories about software development, technology trends, personal passions, plus a bit of everything else!</subtitle><author><name>Made Indra</name></author><entry><title type="html">Money Data Type in Golang</title><link href="https://madeindra.dev/money-data-type-in-golang/" rel="alternate" type="text/html" title="Money Data Type in Golang" /><published>2024-12-09T12:00:00+00:00</published><updated>2024-12-09T12:00:00+00:00</updated><id>https://madeindra.dev/money-data-type-in-golang</id><content type="html" xml:base="https://madeindra.dev/money-data-type-in-golang/"><![CDATA[<p>It’s common knowledge that using <code class="language-plaintext highlighter-rouge">Float</code> (or <code class="language-plaintext highlighter-rouge">Number</code> in JavaScript, which is <code class="language-plaintext highlighter-rouge">Float64</code> behind the scenes) to store monetary data is a bad idea. If you don’t know this yet, try doing <code class="language-plaintext highlighter-rouge">10 / 3</code> in your choice of programming language. I’ve seen a lot of LinkedIn posts ridiculing JavaScript for this.</p>

<p><img src="/assets/others/floating-point-error-1.webp" alt="Dividing 10 by 3" /></p>

<p>When dealing with a user’s balance, let’s say in US Dollars, we sometimes need to deal with cent values. If a user has a balance of US$10.00 and we want to charge them 50 cents (US$0.50), they will have US$9.50 by the end of it. Doesn’t look wrong, right?</p>

<p>But what if the user only has US$1.00 and we charge them 70 cents (US$0.70)?</p>

<p><img src="/assets/others/floating-point-error-2.webp" alt="Subtracting 0.70 from 1.00" /></p>

<p>Mentally we already did the calculation and got US$0.30, but again when I tried the code in JavaScript, I got <code class="language-plaintext highlighter-rouge">0.30000000000000004</code>. Now the customer has more money than they should have.</p>

<blockquote>
  <p>Huh, weird?</p>

  <p>That couldn’t be right. Curse you JavaScript!</p>
</blockquote>

<p>I mean, this problem can be found not only in JavaScript but also in all programming languages that use the <a href="https://en.wikipedia.org/wiki/IEEE_754">IEEE 754</a> standard. So Golang has this problem too, run <a href="https://go.dev/play/p/WE25YQNwOZ5">this piece of code</a> if you don’t believe me.</p>

<h2 id="dealing-with-decimal-places">Dealing with Decimal Places</h2>

<blockquote>
  <p>So what should we use, then?</p>
</blockquote>

<p>Worry not! We have other data types.</p>

<p>Throughout my career, I’ve seen there are two ways most developers handle this; either by using <code class="language-plaintext highlighter-rouge">Integer</code> or <code class="language-plaintext highlighter-rouge">String</code>.</p>

<p>When using <code class="language-plaintext highlighter-rouge">Integer</code>, we write US$1 as <code class="language-plaintext highlighter-rouge">100</code>. Notice that there is no comma separator in the value. This way every calculation can be done in <code class="language-plaintext highlighter-rouge">Integer</code>, no more floating-point issues. This way, we will show <code class="language-plaintext highlighter-rouge">100</code> in API request/response and database to denote US$1.</p>

<p>When using <code class="language-plaintext highlighter-rouge">String</code>, we write US$1 as <code class="language-plaintext highlighter-rouge">"1.00"</code>, then we parse it to <code class="language-plaintext highlighter-rouge">Integer</code> so we get a value like the previous example, do some calculation, and make it into <code class="language-plaintext highlighter-rouge">String</code> again to be stored in the database. This way we can show <code class="language-plaintext highlighter-rouge">"1.00"</code> in the API request/response while calculating them fully in <code class="language-plaintext highlighter-rouge">Integer</code>.</p>

<p>To be honest, I am a bit opinionated on this money-data-type approach.</p>

<p>I think the <code class="language-plaintext highlighter-rouge">Integer</code> approach is great since there is no extra step necessary for parsing value, but the downside is the API consumer has to be aware that <code class="language-plaintext highlighter-rouge">100</code> means <code class="language-plaintext highlighter-rouge">US$1</code> and not <code class="language-plaintext highlighter-rouge">US$100</code>.</p>

<p>If you worked in backend, you know how silly it is to trust that the API consumer would have the same thought process as the API developer.</p>

<p>Personally, I liked the second approach where the API consumer can just pass <code class="language-plaintext highlighter-rouge">String</code> value of either <code class="language-plaintext highlighter-rouge">"1"</code> or <code class="language-plaintext highlighter-rouge">"1.00"</code> and we would still get the same <code class="language-plaintext highlighter-rouge">Integer</code> value of <code class="language-plaintext highlighter-rouge">100</code> to handle. But, I would store them as <code class="language-plaintext highlighter-rouge">Integer</code> not <code class="language-plaintext highlighter-rouge">String</code> so that parsing only happened when receiving request or before sending response.</p>

<h2 id="enter-the-json-interface">Enter the JSON Interface</h2>

<p>I would use JSON for most of my API, this is the format most consumers expect to get.</p>

<p>In Go, there are JSON interface methods that we can override to customize the behavior when receiving requests and sending responses. We will use this to eliminate the need to manually call the <code class="language-plaintext highlighter-rouge">String</code> to <code class="language-plaintext highlighter-rouge">Integer</code> parsing method every time.</p>

<h3 id="determining-the-number-of-decimal-places">Determining The Number of Decimal Places</h3>

<p>Before we start, let’s talk a little bit about currency.</p>

<p>Most countries use 2 decimal places. There’s a country like Kuwait that uses 3 decimal places. And there are countries like Indonesia and Japan that use no decimal places at all. I haven’t found any country that uses more than 3 decimal places, yet.</p>

<p>Being ambitious, let’s say we want to support all currencies from every country in the world. Standardizing 3 decimal places on the backend would be great. On the frontend we don’t need to care; <code class="language-plaintext highlighter-rouge">"1"</code>, <code class="language-plaintext highlighter-rouge">"1.0"</code>, <code class="language-plaintext highlighter-rouge">"1.00"</code> or <code class="language-plaintext highlighter-rouge">"1.000"</code> will all be treated as <code class="language-plaintext highlighter-rouge">"1.000"</code>. Less stress for the API consumers, less conflict we will have. LOL!</p>

<h3 id="overriding-json-marshalunmarshal">Overriding JSON Marshal/Unmarshal</h3>

<p>Now that we have agreed to use 3 decimal places for all money data, let’s start by coding the implementation.</p>

<p>This is our starting point, just like all other Go Projects:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="p">(</span>
	<span class="s">"fmt"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"Hello, World!"</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>First, let’s create a custom data type:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="n">Money</span> <span class="kt">int64</span>
</code></pre></div></div>

<p>Notice that we didn’t write it as <code class="language-plaintext highlighter-rouge">type Money = int64</code>, because this is Type Definition, not Type Alias.</p>

<p>The difference is when doing Aliasing, both data type are interchangeable, meaning we can pass <code class="language-plaintext highlighter-rouge">int64</code> to functions that expect <code class="language-plaintext highlighter-rouge">Money</code> if it were alias of <code class="language-plaintext highlighter-rouge">int64</code>. But, in Type Definition, we need to explicitly cast <code class="language-plaintext highlighter-rouge">int64</code> to <code class="language-plaintext highlighter-rouge">Money</code> before we can pass it to functions that expect <code class="language-plaintext highlighter-rouge">Money</code>.</p>

<p>Now that we have our custom data type, let’s add 2 methods to change the way we receive JSON request and send JSON response:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// UnmarshalJSON implements the json.Unmarshaler interface</span>
<span class="k">func</span> <span class="p">(</span><span class="n">m</span> <span class="o">*</span><span class="n">Money</span><span class="p">)</span> <span class="n">UnmarshalJSON</span><span class="p">(</span><span class="n">data</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
	<span class="c">// remove quotes from string</span>
	<span class="n">s</span> <span class="o">:=</span> <span class="n">strings</span><span class="o">.</span><span class="n">Trim</span><span class="p">(</span><span class="kt">string</span><span class="p">(</span><span class="n">data</span><span class="p">),</span> <span class="s">"</span><span class="se">\"</span><span class="s">"</span><span class="p">)</span>

	<span class="c">// if negative, remove sign</span>
	<span class="n">isNegative</span> <span class="o">:=</span> <span class="n">strings</span><span class="o">.</span><span class="n">HasPrefix</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">"-"</span><span class="p">)</span>
	<span class="k">if</span> <span class="n">isNegative</span> <span class="p">{</span>
		<span class="n">s</span> <span class="o">=</span> <span class="n">s</span><span class="p">[</span><span class="m">1</span><span class="o">:</span><span class="p">]</span>
	<span class="p">}</span>

	<span class="c">// split by point</span>
	<span class="n">parts</span> <span class="o">:=</span> <span class="n">strings</span><span class="o">.</span><span class="n">Split</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">"."</span><span class="p">)</span>
	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">parts</span><span class="p">)</span> <span class="o">&gt;</span> <span class="m">2</span> <span class="p">{</span>
		<span class="k">return</span> <span class="n">fmt</span><span class="o">.</span><span class="n">Errorf</span><span class="p">(</span><span class="s">"invalid decimal format: %s"</span><span class="p">,</span> <span class="n">s</span><span class="p">)</span>
	<span class="p">}</span>

	<span class="c">// parse leading part</span>
	<span class="n">intPart</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">strconv</span><span class="o">.</span><span class="n">ParseInt</span><span class="p">(</span><span class="n">parts</span><span class="p">[</span><span class="m">0</span><span class="p">],</span> <span class="m">10</span><span class="p">,</span> <span class="m">64</span><span class="p">)</span>
	<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="k">return</span> <span class="n">fmt</span><span class="o">.</span><span class="n">Errorf</span><span class="p">(</span><span class="s">"invalid integer part: %v"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
	<span class="p">}</span>

	<span class="c">// multiply by 1000, later will add the trailing part</span>
	<span class="n">result</span> <span class="o">:=</span> <span class="n">intPart</span> <span class="o">*</span> <span class="m">1000</span>

	<span class="c">// parse trailing part, only if exist</span>
	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">parts</span><span class="p">)</span> <span class="o">==</span> <span class="m">2</span> <span class="p">{</span>
		<span class="c">// trim to at max 3 digits (additional decimal places will be ignored)</span>
		<span class="n">decimalPart</span> <span class="o">:=</span> <span class="n">parts</span><span class="p">[</span><span class="m">1</span><span class="p">]</span>
		<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">decimalPart</span><span class="p">)</span> <span class="o">&gt;</span> <span class="m">3</span> <span class="p">{</span>
			<span class="n">decimalPart</span> <span class="o">=</span> <span class="n">decimalPart</span><span class="p">[</span><span class="o">:</span><span class="m">3</span><span class="p">]</span>
		<span class="p">}</span>

		<span class="c">// pad with additional zeros (if less than 3 decimal places)</span>
		<span class="k">for</span> <span class="nb">len</span><span class="p">(</span><span class="n">decimalPart</span><span class="p">)</span> <span class="o">&lt;</span> <span class="m">3</span> <span class="p">{</span>
			<span class="n">decimalPart</span> <span class="o">+=</span> <span class="s">"0"</span>
		<span class="p">}</span>

		<span class="c">// parse</span>
		<span class="n">decimal</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">strconv</span><span class="o">.</span><span class="n">ParseInt</span><span class="p">(</span><span class="n">decimalPart</span><span class="p">,</span> <span class="m">10</span><span class="p">,</span> <span class="m">64</span><span class="p">)</span>
		<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
			<span class="k">return</span> <span class="n">fmt</span><span class="o">.</span><span class="n">Errorf</span><span class="p">(</span><span class="s">"invalid decimal part: %v"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
		<span class="p">}</span>

		<span class="c">// combine leading and trailing part</span>
		<span class="n">result</span> <span class="o">+=</span> <span class="n">decimal</span>
	<span class="p">}</span>

	<span class="c">// if negative, return back sign</span>
	<span class="k">if</span> <span class="n">isNegative</span> <span class="p">{</span>
		<span class="n">result</span> <span class="o">=</span> <span class="o">-</span><span class="n">result</span>
	<span class="p">}</span>

	<span class="o">*</span><span class="n">m</span> <span class="o">=</span> <span class="n">Money</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>

	<span class="k">return</span> <span class="no">nil</span>
<span class="p">}</span>

<span class="c">// MarshalJSON implements the json.Marshaler interface</span>
<span class="k">func</span> <span class="p">(</span><span class="n">m</span> <span class="n">Money</span><span class="p">)</span> <span class="n">MarshalJSON</span><span class="p">()</span> <span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
	<span class="c">// get non-negative value</span>
	<span class="n">value</span> <span class="o">:=</span> <span class="kt">int64</span><span class="p">(</span><span class="n">m</span><span class="p">)</span>
	<span class="n">sign</span> <span class="o">:=</span> <span class="s">""</span>
	<span class="k">if</span> <span class="n">value</span> <span class="o">&lt;</span> <span class="m">0</span> <span class="p">{</span>
		<span class="n">sign</span> <span class="o">=</span> <span class="s">"-"</span>
		<span class="n">value</span> <span class="o">=</span> <span class="o">-</span><span class="n">value</span>
	<span class="p">}</span>

	<span class="c">// calculate leading and trailing digits</span>
	<span class="n">intPart</span> <span class="o">:=</span> <span class="n">value</span> <span class="o">/</span> <span class="m">1000</span>
	<span class="n">decPart</span> <span class="o">:=</span> <span class="n">value</span> <span class="o">%</span> <span class="m">1000</span>

	<span class="c">// always format to trailing 3 decimal</span>
	<span class="n">str</span> <span class="o">:=</span> <span class="n">fmt</span><span class="o">.</span><span class="n">Sprintf</span><span class="p">(</span><span class="s">"%s%d.%03d"</span><span class="p">,</span> <span class="n">sign</span><span class="p">,</span> <span class="n">intPart</span><span class="p">,</span> <span class="n">decPart</span><span class="p">)</span>

	<span class="k">return</span> <span class="n">json</span><span class="o">.</span><span class="n">Marshal</span><span class="p">(</span><span class="n">str</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>For request/response simulation, we will need a struct that has <code class="language-plaintext highlighter-rouge">Money</code> data type as the property:</p>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="n">Data</span> <span class="k">struct</span> <span class="p">{</span>
	<span class="n">Value</span> <span class="n">Money</span> <span class="s">`json:"value"`</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Now to simulate receiving request:</p>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// receiving request</span>
<span class="n">incoming</span> <span class="o">:=</span> <span class="s">`{"value": "1"}`</span>

<span class="k">var</span> <span class="n">received</span> <span class="n">Data</span>
<span class="n">_</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">Unmarshal</span><span class="p">([]</span><span class="kt">byte</span><span class="p">(</span><span class="n">incoming</span><span class="p">),</span> <span class="o">&amp;</span><span class="n">received</span><span class="p">)</span>

<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"incoming data parsed as int64:"</span><span class="p">,</span> <span class="n">received</span><span class="p">)</span>
</code></pre></div></div>

<p>The result will look like this:</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>incoming data parsed as int64: <span class="o">{</span>1000<span class="o">}</span>
</code></pre></div></div>

<p>Whatever value being sent, be it <code class="language-plaintext highlighter-rouge">"1"</code>, <code class="language-plaintext highlighter-rouge">"1.0"</code>, <code class="language-plaintext highlighter-rouge">"1.00"</code> or <code class="language-plaintext highlighter-rouge">"1.000"</code>, the backend will receive it as <code class="language-plaintext highlighter-rouge">1000</code>. Neat, huh?</p>

<p>Now to simulate sending response:</p>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// sending response</span>
<span class="n">outgoing</span> <span class="o">:=</span> <span class="n">Data</span><span class="p">{</span><span class="n">Value</span><span class="o">:</span> <span class="m">5000</span><span class="p">}</span>
<span class="n">sent</span><span class="p">,</span> <span class="n">_</span> <span class="o">:=</span> <span class="n">json</span><span class="o">.</span><span class="n">Marshal</span><span class="p">(</span><span class="n">outgoing</span><span class="p">)</span>

<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"outgoing data converted to string:"</span><span class="p">,</span> <span class="kt">string</span><span class="p">(</span><span class="n">sent</span><span class="p">))</span>
</code></pre></div></div>

<p>The result will look like this:</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>outgoing data converted to string: <span class="o">{</span><span class="s2">"value"</span>:<span class="s2">"5.000"</span><span class="o">}</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">Money</code> data type will be automatically converted to string. Perfect!</p>

<h3 id="putting-them-up">Putting Them Up</h3>

<p>The final result should looks like this:</p>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="p">(</span>
	<span class="s">"encoding/json"</span>
	<span class="s">"fmt"</span>
	<span class="s">"strconv"</span>
	<span class="s">"strings"</span>
<span class="p">)</span>

<span class="k">type</span> <span class="n">Money</span> <span class="kt">int64</span>

<span class="k">func</span> <span class="p">(</span><span class="n">m</span> <span class="o">*</span><span class="n">Money</span><span class="p">)</span> <span class="n">UnmarshalJSON</span><span class="p">(</span><span class="n">data</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
	<span class="c">// remove quotes from string</span>
	<span class="n">s</span> <span class="o">:=</span> <span class="n">strings</span><span class="o">.</span><span class="n">Trim</span><span class="p">(</span><span class="kt">string</span><span class="p">(</span><span class="n">data</span><span class="p">),</span> <span class="s">"</span><span class="se">\"</span><span class="s">"</span><span class="p">)</span>

	<span class="c">// if negative, remove sign</span>
	<span class="n">isNegative</span> <span class="o">:=</span> <span class="n">strings</span><span class="o">.</span><span class="n">HasPrefix</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">"-"</span><span class="p">)</span>
	<span class="k">if</span> <span class="n">isNegative</span> <span class="p">{</span>
		<span class="n">s</span> <span class="o">=</span> <span class="n">s</span><span class="p">[</span><span class="m">1</span><span class="o">:</span><span class="p">]</span>
	<span class="p">}</span>

	<span class="c">// split by point</span>
	<span class="n">parts</span> <span class="o">:=</span> <span class="n">strings</span><span class="o">.</span><span class="n">Split</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">"."</span><span class="p">)</span>
	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">parts</span><span class="p">)</span> <span class="o">&gt;</span> <span class="m">2</span> <span class="p">{</span>
		<span class="k">return</span> <span class="n">fmt</span><span class="o">.</span><span class="n">Errorf</span><span class="p">(</span><span class="s">"invalid decimal format: %s"</span><span class="p">,</span> <span class="n">s</span><span class="p">)</span>
	<span class="p">}</span>

	<span class="c">// parse leading part</span>
	<span class="n">intPart</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">strconv</span><span class="o">.</span><span class="n">ParseInt</span><span class="p">(</span><span class="n">parts</span><span class="p">[</span><span class="m">0</span><span class="p">],</span> <span class="m">10</span><span class="p">,</span> <span class="m">64</span><span class="p">)</span>
	<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="k">return</span> <span class="n">fmt</span><span class="o">.</span><span class="n">Errorf</span><span class="p">(</span><span class="s">"invalid integer part: %v"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
	<span class="p">}</span>

	<span class="c">// multiply by 1000, later will add the trailing part</span>
	<span class="n">result</span> <span class="o">:=</span> <span class="n">intPart</span> <span class="o">*</span> <span class="m">1000</span>

	<span class="c">// parse trailing part, only if exist</span>
	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">parts</span><span class="p">)</span> <span class="o">==</span> <span class="m">2</span> <span class="p">{</span>
		<span class="c">// trim to at max 3 digits (additional decimal places will be ignored)</span>
		<span class="n">decimalPart</span> <span class="o">:=</span> <span class="n">parts</span><span class="p">[</span><span class="m">1</span><span class="p">]</span>
		<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">decimalPart</span><span class="p">)</span> <span class="o">&gt;</span> <span class="m">3</span> <span class="p">{</span>
			<span class="n">decimalPart</span> <span class="o">=</span> <span class="n">decimalPart</span><span class="p">[</span><span class="o">:</span><span class="m">3</span><span class="p">]</span>
		<span class="p">}</span>

		<span class="c">// pad with additional zeros (if less than 3 decimal places)</span>
		<span class="k">for</span> <span class="nb">len</span><span class="p">(</span><span class="n">decimalPart</span><span class="p">)</span> <span class="o">&lt;</span> <span class="m">3</span> <span class="p">{</span>
			<span class="n">decimalPart</span> <span class="o">+=</span> <span class="s">"0"</span>
		<span class="p">}</span>

		<span class="c">// parse</span>
		<span class="n">decimal</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">strconv</span><span class="o">.</span><span class="n">ParseInt</span><span class="p">(</span><span class="n">decimalPart</span><span class="p">,</span> <span class="m">10</span><span class="p">,</span> <span class="m">64</span><span class="p">)</span>
		<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
			<span class="k">return</span> <span class="n">fmt</span><span class="o">.</span><span class="n">Errorf</span><span class="p">(</span><span class="s">"invalid decimal part: %v"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
		<span class="p">}</span>

		<span class="c">// combine leading and trailing part</span>
		<span class="n">result</span> <span class="o">+=</span> <span class="n">decimal</span>
	<span class="p">}</span>

	<span class="c">// if negative, return back sign</span>
	<span class="k">if</span> <span class="n">isNegative</span> <span class="p">{</span>
		<span class="n">result</span> <span class="o">=</span> <span class="o">-</span><span class="n">result</span>
	<span class="p">}</span>

	<span class="o">*</span><span class="n">m</span> <span class="o">=</span> <span class="n">Money</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>

	<span class="k">return</span> <span class="no">nil</span>
<span class="p">}</span>

<span class="c">// MarshalJSON implements the json.Marshaler interface</span>
<span class="k">func</span> <span class="p">(</span><span class="n">m</span> <span class="n">Money</span><span class="p">)</span> <span class="n">MarshalJSON</span><span class="p">()</span> <span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
	<span class="c">// get non-negative value</span>
	<span class="n">value</span> <span class="o">:=</span> <span class="kt">int64</span><span class="p">(</span><span class="n">m</span><span class="p">)</span>
	<span class="n">sign</span> <span class="o">:=</span> <span class="s">""</span>
	<span class="k">if</span> <span class="n">value</span> <span class="o">&lt;</span> <span class="m">0</span> <span class="p">{</span>
		<span class="n">sign</span> <span class="o">=</span> <span class="s">"-"</span>
		<span class="n">value</span> <span class="o">=</span> <span class="o">-</span><span class="n">value</span>
	<span class="p">}</span>

	<span class="c">// calculate leading and trailing digits</span>
	<span class="n">intPart</span> <span class="o">:=</span> <span class="n">value</span> <span class="o">/</span> <span class="m">1000</span>
	<span class="n">decPart</span> <span class="o">:=</span> <span class="n">value</span> <span class="o">%</span> <span class="m">1000</span>

	<span class="c">// always format to trailing 3 decimal</span>
	<span class="n">str</span> <span class="o">:=</span> <span class="n">fmt</span><span class="o">.</span><span class="n">Sprintf</span><span class="p">(</span><span class="s">"%s%d.%03d"</span><span class="p">,</span> <span class="n">sign</span><span class="p">,</span> <span class="n">intPart</span><span class="p">,</span> <span class="n">decPart</span><span class="p">)</span>

	<span class="k">return</span> <span class="n">json</span><span class="o">.</span><span class="n">Marshal</span><span class="p">(</span><span class="n">str</span><span class="p">)</span>
<span class="p">}</span>

<span class="k">type</span> <span class="n">Data</span> <span class="k">struct</span> <span class="p">{</span>
	<span class="n">Value</span> <span class="n">Money</span> <span class="s">`json:"value"`</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="c">// receiving request</span>
	<span class="n">incoming</span> <span class="o">:=</span> <span class="s">`{"value": "1"}`</span>

	<span class="k">var</span> <span class="n">received</span> <span class="n">Data</span>
	<span class="n">_</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">Unmarshal</span><span class="p">([]</span><span class="kt">byte</span><span class="p">(</span><span class="n">incoming</span><span class="p">),</span> <span class="o">&amp;</span><span class="n">received</span><span class="p">)</span>

	<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"incoming data parsed as int64:"</span><span class="p">,</span> <span class="n">received</span><span class="p">)</span>

	<span class="c">// sending response</span>
	<span class="n">outgoing</span> <span class="o">:=</span> <span class="n">Data</span><span class="p">{</span><span class="n">Value</span><span class="o">:</span> <span class="m">5000</span><span class="p">}</span>
	<span class="n">sent</span><span class="p">,</span> <span class="n">_</span> <span class="o">:=</span> <span class="n">json</span><span class="o">.</span><span class="n">Marshal</span><span class="p">(</span><span class="n">outgoing</span><span class="p">)</span>

	<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"outgoing data converted to string:"</span><span class="p">,</span> <span class="kt">string</span><span class="p">(</span><span class="n">sent</span><span class="p">))</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="closing-up">Closing Up</h2>

<p>Now you know (arguably) the best way to handle money data in Golang.</p>

<p>Joke aside, this approach is not the perfect (yet), for production you might want to add more handling such as arithmetic operations, validation rules, and formatting with currency.</p>

<p>But, so far, using this approach, you already get:</p>
<ul>
  <li>Consistent decimal places handling</li>
  <li>Clean API request/response with string representation</li>
  <li>No floating-point arithmetic errors</li>
</ul>

<p>I’d say that’s already enough for a starter (๑˃ᴗ˂)ﻭ</p>

<hr />

<p>Photo by <a href="https://unsplash.com/@nbmat?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash">Mathieu Turle on Unsplash</a></p>]]></content><author><name>Made Indra</name></author><category term="Development" /><summary type="html"><![CDATA[Learn how to handle money data type in Golang without floating-point arithmetic errors using custom type definition and JSON interface implementation.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://madeindra.dev/assets/images/2024-12-09-money-data-type-in-golang.webp" /><media:content medium="image" url="https://madeindra.dev/assets/images/2024-12-09-money-data-type-in-golang.webp" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Storing Docker Image on GitHub Container Registry</title><link href="https://madeindra.dev/storing-docker-image-on-github-container-registry/" rel="alternate" type="text/html" title="Storing Docker Image on GitHub Container Registry" /><published>2024-12-08T00:00:00+00:00</published><updated>2024-12-08T00:00:00+00:00</updated><id>https://madeindra.dev/storing-docker-image-on-github-container-registry</id><content type="html" xml:base="https://madeindra.dev/storing-docker-image-on-github-container-registry/"><![CDATA[<p>Months ago I posted about using <a href="../shell-scripting-cicd">Shell Script for CI/CD</a> in a personal project in which the script includes cloning the repo locally, building the Docker image, and running it as a container right in the VPS. I know, I know. It’s not ideal, and it’s leaking the source code to the server, so let’s redo it.</p>

<p>I want to focus on using GitHub Actions on a private repository to build a Docker image and store it on GitHub Container Registry (<a href="https://ghcr.io/">ghcr.io</a>). It’s perfect for personal projects since we can use up to 500MB total for all images on the GitHub Free plan - it’s counted as GitHub Package storage usage, by the way.</p>

<p>What I am looking for in this round is:</p>
<ul>
  <li>Build the Docker image on GitHub Actions.</li>
  <li>Push the image into GitHub Container Registry.</li>
  <li>Pull the image into the server.</li>
  <li>Run a script to start the image as container on the server.</li>
</ul>

<p>Let’s take a look at how the action looks like.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s">CI/CD Pipeline</span>
<span class="na">on</span><span class="pi">:</span>
  <span class="na">push</span><span class="pi">:</span>
    <span class="na">branches</span><span class="pi">:</span> <span class="pi">[</span> <span class="nv">main</span> <span class="pi">]</span>
  <span class="na">pull_request</span><span class="pi">:</span>
    <span class="na">branches</span><span class="pi">:</span> <span class="pi">[</span> <span class="nv">main</span> <span class="pi">]</span>

<span class="na">env</span><span class="pi">:</span>
  <span class="na">REGISTRY</span><span class="pi">:</span> <span class="s">ghcr.io</span>
  <span class="na">IMAGE_NAME</span><span class="pi">:</span> <span class="s">${{ github.repository }}</span>

<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">build</span><span class="pi">:</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>

    <span class="c1"># this sets permission to read repo content and push image to ghcr.io</span>
    <span class="na">permissions</span><span class="pi">:</span>
      <span class="na">contents</span><span class="pi">:</span> <span class="s">read</span>
      <span class="na">packages</span><span class="pi">:</span> <span class="s">write</span>

    <span class="na">steps</span><span class="pi">:</span>
      <span class="c1"># 1. Checkout the repository</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout repository</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>

      <span class="c1"># 2. Set up Go</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Set up Go</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/setup-go@v2</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">go-version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">1.22'</span>

      <span class="c1"># 3. Install dependencies</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Get dependencies</span>
        <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
          <span class="s">go get -v -t -d ./...</span>

      <span class="c1"># 4. Run Golang tests</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Run tests</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">go test -v ./...</span>
        
      <span class="c1"># 5. Login to ghcr.io</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Login to the container registry</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">docker/login-action@v3</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">registry</span><span class="pi">:</span> <span class="s">${{ env.REGISTRY }}</span>
          <span class="na">username</span><span class="pi">:</span> <span class="s">${{ github.actor }}</span>
          <span class="na">password</span><span class="pi">:</span> <span class="s">${{ secrets.GITHUB_TOKEN }}</span>
      
      <span class="c1"># 6. Extract metadata (tags, labels) for Docker</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Extract metadata</span>
        <span class="na">id</span><span class="pi">:</span> <span class="s">meta</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">docker/metadata-action@v5</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">images</span><span class="pi">:</span> <span class="s">${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}</span>

      <span class="c1"># 7. Build and push image to ghcr.io</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Build and push docker image</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">docker/build-push-action@v6</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">context</span><span class="pi">:</span> <span class="s">.</span>
          <span class="na">push</span><span class="pi">:</span> <span class="kc">true</span>
          <span class="na">tags</span><span class="pi">:</span> <span class="s">${{ steps.meta.outputs.tags }}</span>
          <span class="na">labels</span><span class="pi">:</span> <span class="s">${{ steps.meta.outputs.labels }}</span>
          <span class="c1"># you can pass build-args and secrets here</span>
          <span class="c1"># see https://github.com/marketplace/actions/build-and-push-docker-images</span>

  <span class="na">deploy</span><span class="pi">:</span>
    <span class="c1"># this prevent deployment when image building failed</span>
    <span class="na">needs</span><span class="pi">:</span> <span class="s">build</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">steps</span><span class="pi">:</span>
    <span class="c1"># 8. SSH to the server and run the script</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">executing remote ssh commands using password</span>
      <span class="na">uses</span><span class="pi">:</span> <span class="s">appleboy/ssh-action@v1.2.0</span>
      <span class="na">with</span><span class="pi">:</span>
        <span class="na">host</span><span class="pi">:</span> <span class="s">${{ secrets.HOST }}</span>
        <span class="na">username</span><span class="pi">:</span> <span class="s">${{ secrets.USERNAME }}</span>
        <span class="na">password</span><span class="pi">:</span> <span class="s">${{ secrets.PASSWORD }}</span>
        <span class="na">port</span><span class="pi">:</span> <span class="s">${{ secrets.PORT }}</span>
        <span class="na">script</span><span class="pi">:</span> <span class="pi">|</span>
          <span class="s"># log in to container registry</span>
          <span class="s">echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin</span>
          
          <span class="s"># pull the image</span>
          <span class="s">docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest</span>
          
          <span class="s"># export necessary environment variables for the script here</span>
          <span class="s"># export VARIABLE_NAME=value</span>

          <span class="s"># download and run deploy script using curl with auth header</span>
          <span class="s">curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \</span>
               <span class="s">-H "Accept: application/vnd.github.v3.raw" \</span>
               <span class="s">-o /vps/path/to/save/script_name.sh \</span>
               <span class="s">-L "https://api.github.com/repos/${{ github.repository }}/contents/repo/path/to/script_name.sh?ref=${{ github.sha }}"</span>

          <span class="s">chmod +x /vps/path/to/save/script_name.sh</span>
          <span class="s">/vps/path/to/save/script_name.sh</span>

          <span class="s"># remove script after run completed</span>
          <span class="s">rm -f /vps/path/to/save/script_name.sh</span>
</code></pre></div></div>

<p>With the above changes, no more cloning is needed to build images on the server.</p>

<p>All the build processes happen in the pipeline, and when it’s successfully built, the SSH script will log in to ghcr.io and pull the image. I chose to do Docker login before the script to prevent passing the <code class="language-plaintext highlighter-rouge">GITHUB_TOKEN</code> secret to the script.</p>

<blockquote>
  <p>P.S. <code class="language-plaintext highlighter-rouge">GITHUB_TOKEN</code> is a provided secret value.
No need to add them to the repository secret.</p>

  <p>The only thing I did was adding secrets for the ssh step.</p>
</blockquote>

<p>Only the script is downloaded into the server; the rest of the source code is not. This way, the script can be safely stored in the same repository. Moreover, it’s deleted from the server after the run is completed. Neat!</p>

<p>Just like the previous post, you can do anything inside the <code class="language-plaintext highlighter-rouge">script_name.sh</code>. The only difference would be that this time it would be simpler without the Docker build step:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/sh</span>

<span class="c"># Name for the Docker image</span>
<span class="nv">IMAGE_NAME</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">IMAGE_NAME</span><span class="k">:-</span><span class="nv">username</span><span class="p">/imagename</span>:latest<span class="k">}</span><span class="s2">"</span>
<span class="nv">CONTAINER_NAME</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">CONTAINER_NAME</span><span class="k">:-</span><span class="nv">containername</span><span class="k">}</span><span class="s2">"</span>

<span class="c"># Check if a container with CONTAINER_NAME exists and stop/remove it</span>
<span class="nv">EXISTING_CONTAINER</span><span class="o">=</span><span class="si">$(</span>docker ps <span class="nt">-aq</span> <span class="nt">-f</span> <span class="nv">name</span><span class="o">=</span><span class="s2">"</span><span class="nv">$CONTAINER_NAME</span><span class="s2">"</span><span class="si">)</span>
<span class="k">if</span> <span class="o">[</span> <span class="o">!</span> <span class="nt">-z</span> <span class="s2">"</span><span class="nv">$EXISTING_CONTAINER</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
    </span><span class="nb">echo</span> <span class="s2">"Stopping and removing existing container with name </span><span class="nv">$CONTAINER_NAME</span><span class="s2">..."</span>
    docker stop <span class="nv">$CONTAINER_NAME</span>
    docker <span class="nb">rm</span> <span class="nv">$CONTAINER_NAME</span>
<span class="k">fi</span>

<span class="c"># Run Docker container</span>
<span class="nb">echo</span> <span class="s2">"Running Docker container..."</span>
docker run <span class="nt">-d</span> <span class="nt">--restart</span> always <span class="nt">--name</span> <span class="nv">$CONTAINER_NAME</span> <span class="nv">$IMAGE_NAME</span>

<span class="nb">echo</span> <span class="s2">"Docker container started."</span>

</code></pre></div></div>

<p>Finally, you might be wondering whether GitHub has a dashboard for your images like what <a href="https://hub.docker.com/">DockerHub</a> does. Worry not! You can go to <a href="https://github.com/username?tab=packages">https://github.com/username?tab=packages</a> (change it to your username) to see a list of images you have stored in ghcr.io.</p>

<hr />

<p>Photo by <a href="https://unsplash.com/@richygreat?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash">Richy Great on Unsplash</a></p>]]></content><author><name>Made Indra</name></author><category term="Development" /><summary type="html"><![CDATA[Learn how to use GitHub Actions to build Docker images and store them in GitHub Container Registry (ghcr.io). A guide to improving CI/CD workflow for private repositories without exposing source code to servers.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://madeindra.dev/assets/images/2024-12-08-storing-docker-image-on-github-container-registry.webp" /><media:content medium="image" url="https://madeindra.dev/assets/images/2024-12-08-storing-docker-image-on-github-container-registry.webp" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Docker Argument vs Variable vs Secret</title><link href="https://madeindra.dev/docker-argument-vs-variable-vs-secret/" rel="alternate" type="text/html" title="Docker Argument vs Variable vs Secret" /><published>2024-12-07T00:00:00+00:00</published><updated>2024-12-07T00:00:00+00:00</updated><id>https://madeindra.dev/docker-argument-vs-variable-vs-secret</id><content type="html" xml:base="https://madeindra.dev/docker-argument-vs-variable-vs-secret/"><![CDATA[<p>You might be wondering how to pass a value while building a Docker image. I’ve been there; in fact, I still revisit this topic from time to time. So I want to dedicate a post to building an image with arguments, variables, and secrets.</p>

<p>Let’s start with a simple Dockerfile with multiple stages:</p>

<div class="language-Dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">FROM</span><span class="s"> golang:1.23</span>
<span class="k">WORKDIR</span><span class="s"> /src</span>
<span class="k">COPY</span><span class="s"> &lt;&lt;EOF ./main.go</span>
package main

import "fmt"

func main() {
  fmt.Println("hello, world")
}
EOF
<span class="k">RUN </span>go build <span class="nt">-o</span> /bin/hello ./main.go

<span class="k">FROM</span><span class="s"> scratch</span>
<span class="k">COPY</span><span class="s"> --from=0 /bin/hello /bin/hello</span>
<span class="k">CMD</span><span class="s"> ["/bin/hello"]</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">FROM</code> statements you saw in the example above define stages. The first one builds the file, and the second runs the built binary.</p>

<p>Now let’s talk about build arguments and environment variables. Build arguments in Docker are closely related to environment variables; they are written as <code class="language-plaintext highlighter-rouge">ARG</code> and <code class="language-plaintext highlighter-rouge">ENV</code>, respectively. They are used to pass information to the build process.</p>

<h2 id="build-arguments">Build Arguments</h2>

<p>The way you use <code class="language-plaintext highlighter-rouge">ARG</code> is by defining it either before the stage (a.k.a Global Scope) or inside the stage (a.k.a Local Scope).</p>

<p>The benefit of using <code class="language-plaintext highlighter-rouge">ARG</code> is we can build the image in different way without editing the <code class="language-plaintext highlighter-rouge">Dockerfile</code>.</p>

<p>The value of <code class="language-plaintext highlighter-rouge">ARG</code> is only available during the build process and will not be available when the image is running as a container, unless it is explicitly passed.</p>

<p>I recommend using <code class="language-plaintext highlighter-rouge">ARG</code> for configuring builds. For example, to build a different version, or to use different base image.</p>

<p>This is an example of using <code class="language-plaintext highlighter-rouge">ARG</code> to define the base image to be used for the build.</p>

<div class="language-Dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># create argument for image version</span>
<span class="k">ARG</span><span class="s"> GO_VERSION="1.23"</span>

<span class="c"># use argmument</span>
<span class="k">FROM</span><span class="s"> golang:${GO_VERSION}</span>

<span class="c"># rest of the file stay the same as first example</span>
...
</code></pre></div></div>

<p>Try to build the example above, and you will see that it uses <code class="language-plaintext highlighter-rouge">golang:1.23</code></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker build <span class="nt">-t</span> example:latest <span class="nb">.</span>
</code></pre></div></div>

<p>But if you pass a different version, let’s say <code class="language-plaintext highlighter-rouge">1.22</code>, it will use <code class="language-plaintext highlighter-rouge">golang:1.22</code> instead.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker build <span class="nt">--build-arg</span> <span class="nv">GO_VERSION</span><span class="o">=</span><span class="s2">"1.22"</span> <span class="nt">-t</span> example:latest <span class="nb">.</span>
</code></pre></div></div>

<h3 id="without-default-value">Without Default Value</h3>

<p>We can also just set the argument name without defining the value. This way, the value of the argument will be empty if not provided in the build command.</p>
<div class="language-Dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># create argument without default value</span>
<span class="k">ARG</span><span class="s"> GO_VERSION</span>

<span class="c"># use argmument</span>
<span class="k">FROM</span><span class="s"> golang:${GO_VERSION}</span>

<span class="c"># rest of the file stay the same as first example</span>
...
</code></pre></div></div>

<h3 id="scope">Scope</h3>

<p>If we declare <code class="language-plaintext highlighter-rouge">ARG</code> in the global scope and want to use it inside a stage, <code class="language-plaintext highlighter-rouge">ARG</code> has to be redeclared inside the stage to allow the stage to read the value. There’s no need to write the value again; just the name is enough for the stage to inherit the value.</p>

<p>This version will not work</p>

<div class="language-Dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">ARG</span><span class="s"> MESSAGE="helo, world"</span>

<span class="k">FROM</span><span class="s"> golang:1.23</span>
<span class="k">WORKDIR</span><span class="s"> /src</span>
<span class="c"># this will fail</span>
<span class="k">COPY</span><span class="s"> &lt;&lt;EOF ./main.go</span>
package main

import "fmt"

func main() {
  fmt.Println("${MESSAGE}")
}
EOF
<span class="k">RUN </span>go build <span class="nt">-o</span> /bin/hello ./main.go

<span class="c"># rest of the file stay the same as first example</span>
...
</code></pre></div></div>

<p>With redeclaration, it now works perfectly.</p>

<div class="language-Dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">ARG</span><span class="s"> MESSAGE="helo, world"</span>

<span class="k">FROM</span><span class="s"> golang:1.23</span>
<span class="c"># inherit the arg from global scope</span>
<span class="k">ARG</span><span class="s"> MESSAGE </span>
<span class="k">WORKDIR</span><span class="s"> /src</span>
<span class="k">COPY</span><span class="s"> &lt;&lt;EOF ./main.go</span>
package main

import "fmt"

func main() {
  fmt.Println("${MESSAGE}")
}
EOF
<span class="k">RUN </span>go build <span class="nt">-o</span> /bin/hello ./main.go

<span class="c"># rest of the file stay the same as first example</span>
...
</code></pre></div></div>

<h2 id="environment-variables">Environment Variables</h2>

<p>The way you use <code class="language-plaintext highlighter-rouge">ENV</code> is by defining it inside the stage (a.k.a Local Scope).</p>

<p>The benefit of using <code class="language-plaintext highlighter-rouge">ENV</code> is we can configure the way our container run.</p>

<p>The value of <code class="language-plaintext highlighter-rouge">ENV</code> available during build process and when the image is running as container.</p>

<p>I recommend using <code class="language-plaintext highlighter-rouge">ENV</code> for configuring runtime. For example, to set API endpoints. I don’t recommend using it for sensitive values like passwords.</p>

<p>To pass environment variables during build, we need to use build arguments. This is why I previously said they are closely related.</p>

<div class="language-Dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">ARG</span><span class="s"> USER</span>

<span class="k">FROM</span><span class="s"> golang:1.23</span>
<span class="k">WORKDIR</span><span class="s"> /src</span>
<span class="k">COPY</span><span class="s"> &lt;&lt;EOF ./main.go</span>
package main

import (
  "fmt"
  "os"
)

func main() {
  fmt.Println("Hello", os.Getenv("USER_NAME"))
}
EOF
<span class="k">RUN </span>go build <span class="nt">-o</span> /bin/hello ./main.go

<span class="k">FROM</span><span class="s"> scratch</span>
<span class="c"># inherit &amp; copy the arg from global scope</span>
<span class="k">ARG</span><span class="s"> USER </span>
<span class="k">ENV</span><span class="s"> USER_NAME=${USER}</span>
<span class="k">COPY</span><span class="s"> --from=0 /bin/hello /bin/hello</span>
<span class="k">CMD</span><span class="s"> ["/bin/hello"]</span>
</code></pre></div></div>

<p>Now, after building it, the environment variables will be available in the container, and they can be accessed programmatically (<code class="language-plaintext highlighter-rouge">os.Getenv("ENV_NAME")</code> in Go or <code class="language-plaintext highlighter-rouge">process.env.ENV_NAME</code> in Node.js).</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker build <span class="nt">--build-arg</span> <span class="nv">USER</span><span class="o">=</span><span class="s2">"example"</span> <span class="nt">-t</span> example:latest <span class="nb">.</span>
</code></pre></div></div>

<p>If you are wondering why the <code class="language-plaintext highlighter-rouge">USER_NAME</code> is called by the code in the first stage (build), but the environment variable is copied to the second stage (run), I have an answer for you.</p>

<p>This is because the first stage does not need the environment variables to be present; it will still compile. Once compiled, the binary runs in the second stage, which is where we want the environment variables to be present. Hence, we copied them to the second stage and not the first stage.</p>

<h2 id="build-argument-vs-environment-variables">Build Argument vs Environment Variables</h2>

<p>So here’s a TL;DR version of Build Arguments vs Environment Variables.</p>

<table>
  <thead>
    <tr>
      <th>Aspect</th>
      <th>Build Arguments (ARG)</th>
      <th>Environment Variables (ENV)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Declaration</td>
      <td>Using <code class="language-plaintext highlighter-rouge">ARG</code> keyword</td>
      <td>Using <code class="language-plaintext highlighter-rouge">ENV</code> keyword</td>
    </tr>
    <tr>
      <td>Scope</td>
      <td>Can be Global or Local (stage)</td>
      <td>Local (stage) only</td>
    </tr>
    <tr>
      <td>Availability</td>
      <td>Only during build time (unless explicitly passed)</td>
      <td>During build time and container runtime</td>
    </tr>
    <tr>
      <td>Best Used For</td>
      <td>Build configurations (versions, base images)</td>
      <td>Runtime configurations (API endpoints)</td>
    </tr>
  </tbody>
</table>

<h2 id="build-secrets">Build Secrets</h2>

<p>Why would there be build secrets when build arguments and environment variables already exist?</p>

<p>Well, they are for storing sensitive information like passwords or API keys. By using build secrets, the sensitive information will not be exposed.</p>

<p>Let’s take an example of passing an API key when building a frontend app in JavaScript:</p>

<div class="language-Dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">ARG</span><span class="s"> SECRET_API_KEY</span>

<span class="k">FROM</span><span class="w"> </span><span class="s">node:20</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="s">build</span>

<span class="k">WORKDIR</span><span class="s"> /app</span>
<span class="k">COPY</span><span class="s"> package*.json ./</span>

<span class="k">RUN </span>npm <span class="nb">install</span>
<span class="k">COPY</span><span class="s"> . .</span>
<span class="k">ARG</span><span class="s"> SECRET_API_KEY</span>
<span class="k">RUN </span><span class="nv">SECRET_API_KEY</span><span class="o">=</span><span class="k">${</span><span class="nv">SECRET_API_KEY</span><span class="k">}</span> <span class="se">\
</span>    npm run build

<span class="k">FROM</span><span class="s"> node:20</span>
<span class="k">RUN </span>npm <span class="nb">install</span> <span class="nt">-g</span> serve
<span class="k">COPY</span><span class="s"> --from=build /app/dist ./dist</span>
<span class="k">EXPOSE</span><span class="s"> 3000</span>
<span class="k">CMD</span><span class="s"> ["serve", "-s", "dist", "-l", "3000"]</span>
</code></pre></div></div>

<p>And build it by passing the secret using an argument:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker build <span class="nt">--build-arg</span> <span class="nv">SECRET_API_KEY</span><span class="o">=</span><span class="s2">"example"</span> <span class="nt">-t</span> example:latest <span class="nb">.</span>
</code></pre></div></div>

<p>Yeah, it did work with build arguments, and even if we pass that argument to an environment variable before using it in the build, it will still work.</p>

<p>The problem is we are leaking sensitive information. Docker will also print a warning message about this.</p>

<p>Let’s change the implementation to use build secrets.</p>

<div class="language-Dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">FROM</span><span class="w"> </span><span class="s">node:20-alpine</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">build</span>

<span class="k">WORKDIR</span><span class="s"> /app</span>
<span class="k">COPY</span><span class="s"> package*.json ./</span>

<span class="k">RUN </span>npm <span class="nb">install</span>
<span class="k">COPY</span><span class="s"> . .</span>
<span class="k">RUN </span><span class="nt">--mount</span><span class="o">=</span><span class="nb">type</span><span class="o">=</span>secret,id<span class="o">=</span>SECRET_API_KEY <span class="se">\
</span>    <span class="nv">SECRET_API_KEY</span><span class="o">=</span><span class="si">$(</span><span class="nb">cat</span> /run/secrets/SECRET_API_KEY<span class="si">)</span> <span class="se">\
</span>    npm run build

<span class="k">FROM</span><span class="s"> node:20-alpine</span>
<span class="k">RUN </span>npm <span class="nb">install</span> <span class="nt">-g</span> serve
<span class="k">COPY</span><span class="s"> --from=build /app/dist ./dist</span>
<span class="k">EXPOSE</span><span class="s"> 3000</span>
<span class="k">CMD</span><span class="s"> ["serve", "-s", "dist", "-l", "3000"]</span>
</code></pre></div></div>

<p>We will also change the build command and add the environment variable to the shell before executing the build command:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>export SECRET_API_KEY=example
docker build --secret id=SECRET_API_KEY -t example:latest .
</code></pre></div></div>

<p>No more warning messages, and we successfully pass the secret to the build. Yay!</p>

<h2 id="environment-variables-vs-build-secrets">Environment Variables vs Build Secrets</h2>

<p>So here’s a TL;DR version of Environment Variables vs Build Secrets.</p>

<table>
  <thead>
    <tr>
      <th>Aspect</th>
      <th>Environment Variables (ENV)</th>
      <th>Build Secrets</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Declaration</td>
      <td>Using <code class="language-plaintext highlighter-rouge">ENV</code> keyword</td>
      <td>Using <code class="language-plaintext highlighter-rouge">--mount=type=secret</code></td>
    </tr>
    <tr>
      <td>Visibility</td>
      <td>Visible in image history and container</td>
      <td>Not visible in image history</td>
    </tr>
    <tr>
      <td>Security Level</td>
      <td>Lower (plaintext)</td>
      <td>Higher (secure during build)</td>
    </tr>
    <tr>
      <td>Best Used For</td>
      <td>Non-sensitive configuration</td>
      <td>Sensitive data (API keys, credentials)</td>
    </tr>
  </tbody>
</table>

<hr />

<p>Photo by <a href="https://unsplash.com/@carrier_lost?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash">Ian Taylor on Unsplash</a></p>]]></content><author><name>Made Indra</name></author><category term="Development" /><summary type="html"><![CDATA[Learn the differences between Docker build arguments, environment variables, and build secrets. Understand when and how to use each for configuring your Docker builds and containers.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://madeindra.dev/assets/images/2024-12-07-docker-argument-vs-variable-vs-secret.webp" /><media:content medium="image" url="https://madeindra.dev/assets/images/2024-12-07-docker-argument-vs-variable-vs-secret.webp" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Dealing With Rejections</title><link href="https://madeindra.dev/dealing-with-rejections/" rel="alternate" type="text/html" title="Dealing With Rejections" /><published>2024-11-24T00:00:00+00:00</published><updated>2024-11-24T00:00:00+00:00</updated><id>https://madeindra.dev/dealing-with-rejections</id><content type="html" xml:base="https://madeindra.dev/dealing-with-rejections/"><![CDATA[<p>You are in dire need of a job, and months in, you still haven’t found the right one. You wake up to an email saying they are proceeding with other candidates that better fit their needs, and it hurts. It hurts your ego, it hurts your pride; in short, it hurts. No matter how much you have grown, rejection always hurts. The worst thing about rejection is that you can never get used to it.</p>

<p>Rejection does not exclusively come from your job hunt; it can occur in any aspect of your life. Confessing your feelings, joining a new community, sharing your ideas in public, or even opening up to your own family can lead to rejection. One thing I’ve realized is that even when it’s not our identity that’s being rejected, still, we associate that rejection with ourselves. It’s already hurting us even when we’re only imagining it.</p>

<p>I’m not going to write about how to handle rejections; in fact, I’m not even sure how to do it myself.</p>

<p>The feeling of being worthless, it keeps eating at your heart. You sink even deeper into sadness. It feels like whatever you do doesn’t matter anymore. Sometimes there’s also anger that’s being fueled up by denials.</p>

<p>I know full well how it feels. Like you, I’ve been through a lot of rejections too.</p>

<p>I want to tell you this: whether you didn’t get the job, didn’t win the prize, or had your idea dismissed, it does not change your value.</p>

<p>When you start to feel like you’re in the dumpster, take a rest. Take your time—no matter how long it takes—take as much as you need. I know it sounds cliché, but time does heal wounds. Do things you enjoy, and involve yourself with people who matter. One day, when you’re ready to bounce back, you’ll do it better because you’ve learned the lessons from the rejections you faced.</p>

<p>I pray that one day you will succeed.</p>

<hr />

<p>Photo by <a href="https://unsplash.com/@a_d_s_w?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash">Adrian Swancar on Unsplash</a></p>]]></content><author><name>Made Indra</name></author><category term="Life" /><summary type="html"><![CDATA[Rejection is never easy—whether it’s a job you didn’t land or a competition you didn't win, it stings.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://madeindra.dev/assets/images/2024-11-24-dealing-with-rejection.webp" /><media:content medium="image" url="https://madeindra.dev/assets/images/2024-11-24-dealing-with-rejection.webp" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Tech Stack to Learn for Beginner</title><link href="https://madeindra.dev/tech-stack-to-learn-for-beginner/" rel="alternate" type="text/html" title="Tech Stack to Learn for Beginner" /><published>2024-10-20T00:00:00+00:00</published><updated>2024-10-20T00:00:00+00:00</updated><id>https://madeindra.dev/tech-stack-to-learn-for-beginner</id><content type="html" xml:base="https://madeindra.dev/tech-stack-to-learn-for-beginner/"><![CDATA[<p>We all know how saturated the current tech market is. After the Covid-19 pandemic came to pass, several waves of layoff have occured, and many tech companies are now calling for return to the office. Those caused the market to get even more chaotic. Initially, the market were full of people transitioning from non-tech careers, but now, it’s flooded with experienced people who were either laid off or are unwilling to return to in-office setting. Even worse, companies are not looking to hire more junior candidate anymore, they have less and less chance.</p>

<p>In the midst of this madness, one potential way out of is to explore opportunities with overseas companies, whether through remote work or relocation.</p>

<p>Here’s the thing, standing out among the crowd is not easy. I’m not going to cover resume-polishing tips, those were already widely discussed. Instead, I will focus on which tech stack could give you an edge if you are a newcomer. Bear in mind that these are based on my own observation.</p>

<p>For the backend development, Java and Phython are the most commonly listed programming language in job postings. Moreover, these two has been around for decades, so a lot of technologies are already built on them. Fot the frameworks, it’s usually Java with Spring Boot and Python with either Django or a more recent FastAPI. When it comes to databases, there are typically 2 categories: SQL and NoSQL. For sure, if it’s SQL, the most in-demand would be PostgreSQL or MySQL, but for NoSQL it usually depends on the product they are working on, it could be MongoDB, Cassandra, or even Neo4j. Lastly, familiarity with cloud platforms such as AWS, GCP, or Azure is essential.</p>

<p>For the frontend development, React is on the top. By itself, to master React you need master HTML, CSS, and JavaScript. And, yes, you can start from JavaScript, but skipping TypeScript is not an option in today’s market. Also, if you want to stick to one language for the whole fullstack development (both backend and frontend), you can accompany React with NestJS.</p>

<p>I am not well-versed in roles related to Data, AI, DevOps, SRE, or similar fields, so I can’t give much insight about those area.</p>

<p>However, for mobile development, I recommend to stick with native platforms rather than hybrid like React Native or Flutter. I’ve noticed in several postings that the requirement specify iOS with Swift and Android with Kotlin.</p>

<p>Now, where can you find the postings?</p>

<p>For remote job opportunities, you can start by checking out platforms like <a href="https://remote.com/jobs">Remote.com</a>, <a href="https://remotive.com/">Remotive</a>, <a href="https://wellfound.com/jobs">Wellfound</a>, <a href="https://weworkremotely.com/">WeWorkRemotely</a> and <a href="https://jobgether.com">Jobgether</a>.</p>

<p>When it comes to jobs offering relocation support, I can only think of <a href="https://relocate.me/">Relocate.me</a> as the most trusted. Many companies also list relocation as part of th their perk, so be sure to keep an eye on their career pages.</p>

<hr />

<p>Photo by <a href="https://unsplash.com/@grakozy?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash">Greg Rakozy on Unsplash</a></p>]]></content><author><name>Made Indra</name></author><category term="Learning" /><summary type="html"><![CDATA[Let's explore the current competitive tech job market, with tips on popular tech stacks and where to find remotes and relocation opportunities.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://madeindra.dev/assets/images/2024-10-20-tech-stack-to-learn-for-beginner.webp" /><media:content medium="image" url="https://madeindra.dev/assets/images/2024-10-20-tech-stack-to-learn-for-beginner.webp" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Simple Trick to Learn Foreign Language</title><link href="https://madeindra.dev/trick-to-learn-foreign-language/" rel="alternate" type="text/html" title="Simple Trick to Learn Foreign Language" /><published>2024-10-04T00:00:00+00:00</published><updated>2024-10-04T00:00:00+00:00</updated><id>https://madeindra.dev/trick-to-learn-foreign-language</id><content type="html" xml:base="https://madeindra.dev/trick-to-learn-foreign-language/"><![CDATA[<h2 id="learning-a-new-language-is-difficult-i-know">Learning a New Language is Difficult, I Know!</h2>

<p>Making sense of the words, how to pronounce them, use them in a sentence properly, and so on. Those new rules that people are not familiar with are the challenges that usually discourage people from learning.</p>

<blockquote>
  <p>Why is it so hard for us to learn a foreign language when it seems natural for the native speaker to speak it?</p>
</blockquote>

<p>Yeah, you might think that statement was silly, but that’s the point.</p>

<p>The single trick to make learning a foreign language easier is to approach it like a native speaker would.</p>

<hr />

<p>Some people try learning a new language by translating, but this method usually doesn’t work well because it slows down the process. They rely on their mother tongue as a base. When they want to speak in a foreign language, they first translate each word and then try to put them in the right place using the proper grammar.</p>

<p>If you’re wondering whether you are one of these learners, try speaking in the foreign language. Were you speaking it while thinking in a different language, in your mother tongue, perhaps?</p>

<p>The goal is to think and speak in the same language—removing the translation process happening inside your head, making it feel more natural.</p>

<h2 id="how-we-learn-our-first-language">How We Learn Our First Language</h2>

<p>Let’s rewind and take a look at how we learned our first language, back when we didn’t know any language at all.</p>

<p>Here’s what we did to learn a new word as a baby:</p>
<ol>
  <li>Observed the use of a word multiple times, either pointed or heard.</li>
  <li>Grasped the gist of its meaning.</li>
  <li>Tried to use the word in contexts we understood.</li>
  <li>Read other people’s reactions to see if the usage was proper or not.</li>
  <li>If the reaction was positive, our understanding was validated, and we will learn more through repetition.</li>
  <li>If the reaction wasn’t positive, we usually shown the proper use, and we will try to use it again until we get positive reaction.</li>
</ol>

<p>Once we knew a lot of words, we repeated the same process when trying to make sentences. It took years before we formally learned how to structure sentences properly.</p>

<hr />

<p>What usually differs when learning a foreign language is how we use our senses and the steps we follow.</p>

<p>When learning a new language, some people usually start with a book or an app. They read about words, learn what they mean, and how to make sentences with those words. It’s not wrong, but it will be much harder if that’s the only source of learning.</p>

<p>If we were to replicate the learning process of a baby, we should immerse ourselves in the language we are learning. A simple way to do this is by consuming media in that language: news, movies, or music. This way, we can start hearing words and seeing how they are used, associating them with the sensations of what we see or hear.</p>

<p>Learn and associate as many words as we can with our senses before starting to make sentences. Once we’re familiar with making sentences, then learn how to make a proper one using the proper grammar. Having someone validate what we write or say is crucial, but it’s not a dealbreaker once we can correct ourselves.</p>

<p>We don’t want to solely rely on our brain to memorize things when we just started. Instead, we should use our senses as much as we can. That way, recalling things would be off top of our head.</p>

<hr />

<h2 id="final-thoughts">Final Thoughts</h2>

<p>So, I think the trick to learning a new language is to start by learning as many words as possible, associating those words with your senses (vision, hearing, smell, etc.), and recalling them whenever you experience that sensation—be it through writing or speaking. Receiving feedback is also a part of the learning process. That’s why having someone to converse with (written or spoken) will strengthen your foundation and help you become fluent.</p>

<hr />

<p>Photo by <a href="https://unsplash.com/@priscilladupreez?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash">Priscilla Du Preez on Unsplash</a></p>]]></content><author><name>Made Indra</name></author><category term="Learning" /><summary type="html"><![CDATA[A practical guide to make learning a new language feel more natural. Based on observation of common mistakes.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://madeindra.dev/assets/images/2024-10-04-trick-to-learn-foreign-language.webp" /><media:content medium="image" url="https://madeindra.dev/assets/images/2024-10-04-trick-to-learn-foreign-language.webp" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Shell Script for CI/CD</title><link href="https://madeindra.dev/shell-scripting-cicd/" rel="alternate" type="text/html" title="Shell Script for CI/CD" /><published>2024-09-29T00:00:00+00:00</published><updated>2024-09-29T00:00:00+00:00</updated><id>https://madeindra.dev/shell-scripting-cicd</id><content type="html" xml:base="https://madeindra.dev/shell-scripting-cicd/"><![CDATA[<p>In professional settings, code deployment typically involves a CI/CD process that runs in a pipeline. This process ensures everything is in order before updating the deployment on the cloud.</p>

<p>To put it simply, it usually consist of:</p>
<ul>
  <li>A codebase stored in a repository</li>
  <li>A repository pipeline (e.g. automated testing, building, and deployment)</li>
  <li>A cloud server</li>
</ul>

<hr />

<p>A few months ago, I wanted to replicate that process for my hobbyist project. The lower the cost, the better.</p>

<p>I already had a VPS ready and my code was already stored in GitHub.</p>

<p>My goals were to:</p>
<ul>
  <li>Run automated tasks on commit / merge to the <code class="language-plaintext highlighter-rouge">main</code> branch.</li>
  <li>Build a private docker image from the code</li>
  <li>Replace the current running container with the new image</li>
</ul>

<p>It was pretty simple.</p>

<p>I didn’t want to use IaC tool like Terraform, that would be overkill. Instead, I opt for Shell Scripts, I know this will suffice my needs.</p>

<p>Since this project is private, I wanted my docker image to be stored in a private Docker repository. Unfortunately, my docker account isn’t a Pro account, I needed two private Docker repositories (for backend &amp; frontend).</p>

<blockquote>
  <p>Please don’t judge me.</p>

  <p>Back then, I had yet to realize that there are several alternatives to Docker Hub</p>
</blockquote>

<p><img src="https://madeindra.dev/assets/gifs/oh-no-anyway.webp" alt="Oh no! Anyway" /></p>

<p>I thought to myself, “I might as well clone the repo on the server and build it there”.</p>

<p>I know, I know. It’s not the most ideal solution, but it works.</p>

<p>So I put the script inside the repo, cloned the repo on the server, and designed a pipeline to run the script. The script essentially does the following:</p>
<ol>
  <li>Stashes all changes on the local. This is to make sure all uncommited change won’t block the git pull.</li>
  <li>Pulls the latest changes.</li>
  <li>Builds docker image without cache.</li>
  <li>Stops the existing container.</li>
  <li>Reruns the container with the latest image.</li>
  <li>Connects the container to the docker network.</li>
</ol>

<p>To achieve this, I needed to create a GitHub Personal Access Token to read the repo and set the token as a secret on the pipeline.</p>

<p>Here’s the preview of the script:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/sh</span>

<span class="c"># Set variables</span>
<span class="nv">DOCKER_IMAGE_NAME</span><span class="o">=</span><span class="s2">"your-image-name"</span>
<span class="nv">DOCKER_CONTAINER_NAME</span><span class="o">=</span><span class="s2">"your-container-name"</span>
<span class="nv">DOCKER_NETWORK_NAME</span><span class="o">=</span><span class="s2">"your-network-name"</span>

<span class="c"># 1. Stash all changes on the local</span>
git stash

<span class="c"># 2. Pull the latest changes</span>
git pull

<span class="c"># 3. Build docker image without cache</span>
docker build <span class="nt">--no-cache</span> <span class="nt">-t</span> <span class="nv">$DOCKER_IMAGE_NAME</span> <span class="nb">.</span>

<span class="c"># 4. Stop the existing container</span>
docker stop <span class="nv">$DOCKER_CONTAINER_NAME</span>

<span class="c"># 5. Remove the existing container</span>
docker <span class="nb">rm</span> <span class="nv">$DOCKER_CONTAINER_NAME</span>

<span class="c"># 6. Rerun the container with the latest image</span>
docker run <span class="nt">-d</span> <span class="nt">--name</span> <span class="nv">$DOCKER_CONTAINER_NAME</span> <span class="nv">$DOCKER_IMAGE_NAME</span>

<span class="c"># 7. Connect the container to the docker network</span>
docker network connect <span class="nv">$DOCKER_NETWORK_NAME</span> <span class="nv">$DOCKER_CONTAINER_NAME</span>
</code></pre></div></div>

<p>As for the GitHub Action to run the pipeline, it:</p>
<ol>
  <li>Checks out the repo.</li>
  <li>Sets up programming language.</li>
  <li>Sets up dependencies of automated taskss.</li>
  <li>Runs automated task (e.g tests); if they pass, it continues to the next step.</li>
  <li>SSHs to the server. I used <a href="https://github.com/marketplace/actions/ssh-remote-commands">SSH Remote Command by appleboy</a>. Then, on the ssh, mount the directory and run the script.</li>
</ol>

<p>I needed to set the SSH credentials as secrets on the pipeline as well. However, I considered the 5th step less than ideal because if I need to move the directory of the script, I’ll have to modify the GitHub Action script.</p>

<p>Here’s the preview of the script:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s">CI/CD Pipeline</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="na">push</span><span class="pi">:</span>
    <span class="na">branches</span><span class="pi">:</span> <span class="pi">[</span> <span class="nv">main</span> <span class="pi">]</span>
  <span class="na">pull_request</span><span class="pi">:</span>
    <span class="na">branches</span><span class="pi">:</span> <span class="pi">[</span> <span class="nv">main</span> <span class="pi">]</span>

<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">build-and-deploy</span><span class="pi">:</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>

    <span class="na">steps</span><span class="pi">:</span>
    <span class="c1"># 1. Checkout the repository</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout repository</span>
      <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v2</span>

    <span class="c1"># 2. Set up Go</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Set up Go</span>
      <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/setup-go@v2</span>
      <span class="na">with</span><span class="pi">:</span>
        <span class="na">go-version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">1.22'</span>

    <span class="c1"># 3. Install dependencies</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Get dependencies</span>
      <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
        <span class="s">go get -v -t -d ./...</span>

    <span class="c1"># 4. Run Golang tests</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Run tests</span>
      <span class="na">run</span><span class="pi">:</span> <span class="s">go test -v ./...</span>
      
    <span class="c1"># 5. SSH to the server and run the script</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Deploy to server</span>
      <span class="na">uses</span><span class="pi">:</span> <span class="s">appleboy/ssh-action@v1.2.0</span>
      <span class="na">with</span><span class="pi">:</span>
        <span class="na">host</span><span class="pi">:</span> <span class="s">${{ secrets.SERVER_HOST }}</span>
        <span class="na">username</span><span class="pi">:</span> <span class="s">${{ secrets.SERVER_USERNAME }}</span>
        <span class="na">password</span><span class="pi">:</span> <span class="s">${{ secrets.PASSWORD }}</span>
        <span class="na">port</span><span class="pi">:</span> <span class="s">${{ secrets.PORT }}</span>
        <span class="na">script</span><span class="pi">:</span> <span class="pi">|</span>
          <span class="s"># export necessary environment variables for the script here</span>
          <span class="s"># export VARIABLE_NAME=value</span>

          <span class="s"># run script</span>
          <span class="s">cd /path/to/your/project</span>
          <span class="s">./script_name.sh</span>
</code></pre></div></div>

<p>You can do anything with the <code class="language-plaintext highlighter-rouge">script_name.sh</code>, let’s say you want to build docker image on the server and run it:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/sh</span>

<span class="c"># Name for the Docker image</span>
<span class="nv">IMAGE_NAME</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">IMAGE_NAME</span><span class="k">:-</span><span class="nv">username</span><span class="p">/imagename</span>:latest<span class="k">}</span><span class="s2">"</span>
<span class="nv">CONTAINER_NAME</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">CONTAINER_NAME</span><span class="k">:-</span><span class="nv">containername</span><span class="k">}</span><span class="s2">"</span>

<span class="c"># Build Docker image</span>
<span class="nb">echo</span> <span class="s2">"Building Docker image..."</span>
docker build <span class="nt">-t</span> <span class="nv">$IMAGE_NAME</span> <span class="nb">.</span>

<span class="c"># Check if a container with CONTAINER_NAME exists and stop/remove it</span>
<span class="nv">EXISTING_CONTAINER</span><span class="o">=</span><span class="si">$(</span>docker ps <span class="nt">-aq</span> <span class="nt">-f</span> <span class="nv">name</span><span class="o">=</span><span class="s2">"</span><span class="nv">$CONTAINER_NAME</span><span class="s2">"</span><span class="si">)</span>
<span class="k">if</span> <span class="o">[</span> <span class="o">!</span> <span class="nt">-z</span> <span class="s2">"</span><span class="nv">$EXISTING_CONTAINER</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
    </span><span class="nb">echo</span> <span class="s2">"Stopping and removing existing container with name </span><span class="nv">$CONTAINER_NAME</span><span class="s2">..."</span>
    docker stop <span class="nv">$CONTAINER_NAME</span>
    docker <span class="nb">rm</span> <span class="nv">$CONTAINER_NAME</span>
<span class="k">fi</span>

<span class="c"># Run Docker container</span>
<span class="nb">echo</span> <span class="s2">"Running Docker container..."</span>
docker run <span class="nt">-d</span> <span class="nt">--restart</span> always <span class="nt">--name</span> <span class="nv">$CONTAINER_NAME</span> <span class="nv">$IMAGE_NAME</span>

<span class="nb">echo</span> <span class="s2">"Docker image built and container started."</span>

</code></pre></div></div>

<p>One more thing, I wanted to automate database backup. This was still possible with the good ol’ Shell Script with the help of Cron.</p>

<p>I just went and open cron on the server:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>crontab <span class="nt">-e</span>
</code></pre></div></div>

<p>Then set the script to run every Sunday midnight:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0 0 <span class="k">*</span> <span class="k">*</span> SUN <span class="nv">BASH_ENV</span><span class="o">=</span>/root/.bashrc /path/to/script.sh <span class="o">&gt;&gt;</span> /path/to/script_log.log 2&gt;&amp;1
</code></pre></div></div>

<p>See <a href="https://crontab.guru/">crontab.guru</a> if you want to learn about other format for cron job.</p>

<p>Here’s preview of how my script do backup with PostgreSQL that runs in docker.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/sh</span>

<span class="c"># Exit immediately if a command exits with a non-zero status.</span>
<span class="nb">set</span> <span class="nt">-e</span>

<span class="c"># Define the variables</span>
<span class="nv">CONTAINER_NAME</span><span class="o">=</span><span class="s2">"postgres"</span>
<span class="nv">BACKUP_FILE</span><span class="o">=</span><span class="s2">"backup_</span><span class="si">$(</span><span class="nb">date</span> +<span class="se">\%</span>Y-<span class="se">\%</span>m-<span class="se">\%</span>d_<span class="se">\%</span>H-<span class="se">\%</span>M-<span class="se">\%</span>S<span class="si">)</span><span class="s2">.sql"</span>

<span class="c"># Directory where the script is located</span>
<span class="nv">WORKDIR</span><span class="o">=</span><span class="s2">"/path/to/your/project"</span>

<span class="c"># Backup the PostgreSQL database to a .sql file</span>
docker <span class="nb">exec</span> <span class="nt">-t</span> <span class="nv">$CONTAINER_NAME</span> pg_dump <span class="nt">-U</span> <span class="nv">$POSTGRES_USER</span> <span class="nt">-d</span> <span class="nv">$POSTGRES_DB</span> <span class="nt">-F</span> c <span class="nt">-b</span> <span class="nt">-v</span> <span class="nt">-f</span> /root/<span class="nv">$BACKUP_FILE</span>

<span class="c"># Copy the backup from the container to the host</span>
docker <span class="nb">cp</span> <span class="nv">$CONTAINER_NAME</span>:/root/<span class="nv">$BACKUP_FILE</span> <span class="nv">$WORKDIR</span>/backup
</code></pre></div></div>

<p>With this, the sql dumps will be available in <code class="language-plaintext highlighter-rouge">/path/to/your/project/backup</code> directory.</p>

<p>I needed to set the PostgreSQL credentials on <code class="language-plaintext highlighter-rouge">.bashrc</code> to make this work and include <code class="language-plaintext highlighter-rouge">BASH_ENV=/root/.bashrc</code> on the cron job so it would be able to retrieve the environment variables later.</p>

<hr />

<p>In the future, I’d like to simplify this workflow. Not having to build on the server would be a boon. I’ve discovered that I can publish docker image for free to <a href="https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-container-registry">GitHub Container Registry</a>.</p>

<p>I have successfully built the docker image and pushed it to ghcr.io on the pipeline. The next step is to prepare a script to pull the image and run it on the server. Maybe I will write another about this in the future. (｡•̀ᴗ-)✧</p>

<hr />

<p>Photo by <a href="https://unsplash.com/@casparrubin?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash">Caspar Camille Rubin on Unsplash</a></p>]]></content><author><name>Made Indra</name></author><category term="Development" /><summary type="html"><![CDATA[A hobbyist's guide to simple CI/CD using shell scripts. Covers automating tasks, building Docker images, and deploying containers on a VPS with GitHub Actions.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://madeindra.dev/assets/images/2024-09-29-shell-scripting-cicd.webp" /><media:content medium="image" url="https://madeindra.dev/assets/images/2024-09-29-shell-scripting-cicd.webp" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">AI for Mock Interview</title><link href="https://madeindra.dev/ai-for-mock-interview/" rel="alternate" type="text/html" title="AI for Mock Interview" /><published>2024-09-28T00:00:00+00:00</published><updated>2024-09-28T00:00:00+00:00</updated><id>https://madeindra.dev/ai-for-mock-interview</id><content type="html" xml:base="https://madeindra.dev/ai-for-mock-interview/"><![CDATA[<p>So, several months ago I created a fullstack web app to assist people in preparing for developer job interview using AI.</p>

<p>I started simple because the project was intended for beginner to follow. Then, my significant other challenged me to make the app accessible for roles other than developer.</p>

<h2 id="starting-as-web-application">Starting as Web Application</h2>

<p>The whole idea of the app is straightforward yet powerful: users record their voice and the AI responds with questions in both voice and text format.</p>

<p>If you are interested, you can find the <a href="https://github.com/madeindra/mock-interview">Mock Interview app on GitHub</a>.</p>

<p>On the frontend, I made use of MediaStream API to capture voice recordings and pass them to the backend. Later, the frontend will play the audio and show the text that came in the response. When I started, it was a vanilla JavaScript, but later I rewrote it into TypeScript with React.</p>

<p>Meanwhile, the backend was built with Golang, serving as API interface with OpenAI’s API. The process follows these steps:</p>

<ol>
  <li>Transcribe the voice recording into text</li>
  <li>Pass the transcript to the chat API to generate a question</li>
  <li>Convert the text question into voice</li>
</ol>

<p>When I need to make this app available for non-developer job interview, it was just a matter of updating the prompt with no change necessary to the backend or the frontend code.</p>

<h2 id="porting-to-desktop-app">Porting to Desktop App</h2>

<p>With the app running well on my laptop, the next challenge was making it accessible over the internet to specific users.</p>

<p>I can just deploy the app on a VPS, but I didn’t have a proper authentication and authorization process in place.</p>

<p>It would be bothersome for me to start coding it back then. I mean, I need to create a user tables in the database, thinking about a secure way to store the password hashing key, or even integrating with social login to make OAuth possible.</p>

<p>I asked myself whether I should rewrite the app into Electron app, but I would need to rewrite the whole backend, ouch!</p>

<p>This is where <a href="https://wails.io">Wails</a> came to my rescue.</p>

<p>I don’t need to rewrite my backend and frontend, just use the existing one with minimal changes, and voila!</p>

<p>The process was surprisingly straightforward:</p>

<ol>
  <li>Changed the api handler functions into Wails app method.</li>
  <li>Replaced the <code class="language-plaintext highlighter-rouge">fetch</code> call with the Wails-translated runtime functions.</li>
  <li>Replaced unsupported browser function (e.g <code class="language-plaintext highlighter-rouge">windows.alert</code>) with Wails desktop equivalents.</li>
</ol>

<p>That’s it, it was pretty easy too.</p>

<p>See the <a href="https://github.com/madeindra/interview-app">Desktop Port of the Interview App on GitHub</a>, if you are interested.</p>

<hr />

<p>One significant problem I faced was ensuring the MediaStream API available withing the Wails environment. This Browser API is exposed through <code class="language-plaintext highlighter-rouge">Navigator.mediaDevices</code>, which available only if the web is accessed in secure context( e.g <code class="language-plaintext highlighter-rouge">http://</code>, <code class="language-plaintext highlighter-rouge">http</code>, <code class="language-plaintext highlighter-rouge">localhost</code>, etc). I was sure that Wails appp access through <code class="language-plaintext highlighter-rouge">wails://</code> that should be a secure context.</p>

<p>Moreover, the problem with <code class="language-plaintext highlighter-rouge">Navigator.mediaDevices</code> not being available was not consistent, sometimes it was <code class="language-plaintext highlighter-rouge">undefined</code>, other time it was not.</p>

<p>It was really stressful.</p>

<p>Without the Browser APIs available, I struggled to record the audio.</p>

<p>A little googling suggested that I let Golang handle the recording, so I tried <code class="language-plaintext highlighter-rouge">portaudio</code> with no luck, and I haven’t even started with making the recording work on multiple operating systems.</p>

<p>To be perfectly honest, the <code class="language-plaintext highlighter-rouge">portaudio</code> library did work on Mac, but it was very slow and sometimes there was only screech instead of a voice recording. The app lost the real-interview feelings.</p>

<hr />

<p>Turns out I need to make a proper policy change on the <code class="language-plaintext highlighter-rouge">.plist</code> for Mac.</p>

<p>I updated it and later I never get the same problem. Welcome back, Browser APIs!</p>

<h2 id="lessons-learned">Lessons Learned</h2>

<p>For a long time I take Browser APIs for granted, a lot of the functionalities I usually use (e.g. image, video, and audio capture) come bundled with the browser and are easily accessible through JavaScript.</p>

<p>When they are not available, I will be forced to interact directly with the OS. Making that work across Windows; Mac; and Linux at the same time won’t be fun.</p>

<hr />

<p>Photo by <a href="https://unsplash.com/@headwayio?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash">Headway on Unsplash</a></p>]]></content><author><name>Made Indra</name></author><category term="Project" /><summary type="html"><![CDATA[My journey on porting an AI-powered web app for developer interview prep into a desktop app that can be run by anyone on their laptop. The fun and challenges faced during the process will be shared here.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://madeindra.dev/assets/images/2024-09-28-ai-for-mock-interview.webp" /><media:content medium="image" url="https://madeindra.dev/assets/images/2024-09-28-ai-for-mock-interview.webp" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Unfair Labor Standard</title><link href="https://madeindra.dev/unfair-labor-standard/" rel="alternate" type="text/html" title="Unfair Labor Standard" /><published>2024-09-21T00:00:00+00:00</published><updated>2024-09-21T00:00:00+00:00</updated><id>https://madeindra.dev/unfair-labor-standard</id><content type="html" xml:base="https://madeindra.dev/unfair-labor-standard/"><![CDATA[<p>I have been trying not to talk about the negative aspects happening in Indonesia for years. Not because I don’t care, but because some people see it as unprofessional.</p>

<p>Let me tell you, if people feel that something is not right and stay silent, change won’t happen.</p>

<h2 id="quarter-life-crisis">Quarter-Life Crisis</h2>

<p>This started when I was almost 25. As people commonly know, this is when most individuals feel conflicted about their life, career, and everything in between.</p>

<p>Growing up idealistic, I was faced with a difficult position: succumb to “dirty” practices to get a steady job, or find a job I wouldn’t feel guilty about, even if it’s a bit unstable.</p>

<p>I won’t talk about the former; it’s an open secret.</p>

<p>Regardless, I chose the latter and forced myself to hunt for a job. That’s when I realized reality was never as beautiful as I had imagined as a kid.</p>

<p>There were numerous jobs that required people to be under a certain age. I remember the first job I applied for had an under-29 criterion. I was lucky to be included in that criterion, but I know it’s not going to be long. Once I reach that age, applying for jobs will be much harder.</p>

<h2 id="age-limitation">Age Limitation</h2>

<p>To be perfectly honest, I don’t know the reason behind such age limitations on job applications.</p>

<p>People say it’s due to salary budgets, but I am not certain that is the reason.</p>

<hr />

<p>From today’s perspective, working in a foreign company, that was not the case.</p>

<p>Several months ago, my colleague just celebrated their 50th birthday. They are 50 and still working.</p>

<p>Turns out it is common; looking around, there are a lot of colleagues who are much more senior than me. They bring wisdom and expertise that no greener hires will have.</p>

<blockquote>
  <p>How come?</p>
</blockquote>

<p>I did not realize that fair labor standards are a thing.</p>

<p>Discrimination against people of a certain age applying for jobs is prohibited in some countries.</p>

<h2 id="political-influence">Political Influence</h2>

<p>When talking about laws, it’s down to politics.</p>

<p>I was furious in light of recent events, where the Constitutional Court tampered with laws to allow for certain individuals to get a specific position - <a href="https://www.bbc.com/indonesia/articles/cpvl6l2p439o">source</a>. This almost happened again through the Supreme Court for the upcoming election - <a href="https://nasional.kompas.com/read/2024/08/21/15294141/pakar-putusan-mk-tak-bisa-dianulir-dengan-revisi-uu">source</a>.</p>

<p>At the same time, they deny that age requirements in job applications are discriminatory - <a href="https://www.cnnindonesia.com/nasional/20240730162502-12-1127234/mk-tolak-gugatan-uu-ketenagakerjaan-batas-usia-bukan-diskriminasi">source</a>.</p>

<p>To this day, people still live in this country with the fear of not getting a job once they reach a certain age.</p>

<h2 id="the-future">The Future</h2>

<p>To stay one step ahead, I really hope that in the coming years, they will realize that the current workforce is not easily replaced. And at that time, I hope they start by forbidding age discrimination in job applications.</p>

<p>I believe that everyone should have an equal standing when they want to support themselves and their family, not forgetting that these are the same people who will contribute to the country through their income tax.</p>

<hr />

<p>Photo by <a href="https://unsplash.com/@visuals?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash">visuals on Unsplash</a></p>]]></content><author><name>Made Indra</name></author><category term="Work" /><summary type="html"><![CDATA[A reflection on Indonesia's job market constraints, focusing on age discrimination and political influence, with a hope for future labor reforms and equality.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://madeindra.dev/assets/images/2024-09-21-unfair-labor-standard.webp" /><media:content medium="image" url="https://madeindra.dev/assets/images/2024-09-21-unfair-labor-standard.webp" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Too Big To Fail: A Corporation Story</title><link href="https://madeindra.dev/too-big-too-fail/" rel="alternate" type="text/html" title="Too Big To Fail: A Corporation Story" /><published>2024-09-16T00:00:00+00:00</published><updated>2024-09-16T00:00:00+00:00</updated><id>https://madeindra.dev/too-big-too-fail</id><content type="html" xml:base="https://madeindra.dev/too-big-too-fail/"><![CDATA[<p>In the past, I’ve dreamed about landing the perfect job which I could do until my retirement day. It’s also Indonesian parents’ dream to have their kids working as Civil Servants or State Enterprise Employees. So, after a year of teaching and making a bare minimum, I tried my best to land my dream job. I did succeed, but reality was never as beautiful as your dream, am I right?</p>

<p>My former employer is a telecommunications company that is in the process of transforming into a digital company. The reason being the revenue coming from the telecommunications field is running low, and the customer growth is just stagnant.</p>

<p>While looking for another source of income, they found out that people are willing to pay for services that run on top of their telecommunications service (e.g. music streaming, video streaming, call over the internet). With that idea in mind, they planned to create their own digital services to compete. While working there for around five years, I witnessed several problems with that idea.</p>

<h2 id="rigid-mindset">Rigid Mindset</h2>

<p>Since the beginning, the image of a “corporation” is seen as a company where the older generation dominates the leaderboard and leads with their old-style leadership. Up until today, the said company is trying really hard to grow a new image of a stylish &amp; modern company for the younger generation. It paid off because of two reasons. First, people are already idolizing the company and want to work there. Second, having their dream company branded as a new shiny corporation makes them want to work there even more.</p>

<p>While they did try to put more and more younger people on the leaderboard, the problem that I saw was: you need more than talent to be promoted.</p>

<p>I’ve seen a number of talented and popular people not survive because they can’t keep their idealism of the “new way of working” and surrendered to the tested-and-true old way; it’s just so hard to change what’s already there for years. This, in turn, makes the younger generation have the same old mindset: doing as what the boss told you to.</p>

<h2 id="copying-startup">Copying Startup</h2>

<blockquote>
  <p>Oh, people are loving startups!</p>

  <p>Oh, startups are winning even though they are newer and have less money than us!</p>

  <p>Let’s do the same as what startups do, we will succeed!</p>
</blockquote>

<p><strong>Yeah, No</strong></p>

<p>That just doesn’t work. Startup companies are moving really fast.</p>

<p>The organization size is usually leaner in startups, which, in my opinion, could lead to a faster feedback cycle. Goals could be better communicated with fewer people, leading to having the same vision.</p>

<p>Meanwhile, it’s easy to lose track of what should be done when you just work as what the boss wants you to. If new employees could have a greater influence, I think that’s a good change.</p>

<p>I know there must be a way for a corporation to move faster, but copying what startups do is not the answer.</p>

<hr />

<p>Back in my day, the leaders wanted the development process to be better and more standardized. What they did was create several meetings to formulate rules and standards, then after it was done, they just left it to the people to use it.</p>

<p>There was no enforcement process whatsoever.</p>

<blockquote>
  <p>You want to build a new product? You have to use Golang or JavaScript!</p>

  <p>But what if the team can only code in PHP?</p>

  <p>Leave them be.</p>
</blockquote>

<p><strong>Then what’s the point?</strong></p>

<p>Creating a standardized development process is well and good, but if it’s just on paper, it’s as good as no standards.</p>

<h2 id="not-knowing-the-market">Not Knowing The Market</h2>

<p>Do you know why you create your product?</p>

<p>If the answer is because it’s what the startup sells, that’s not a great answer.</p>

<p>I heard someone mockingly say that it’s better not to spend any research since the competitor has already proven that the demand exists.</p>

<p>Yeah, building the same product hoping people will use ours is pretty lame, especially when the product introduced has no unique selling point whatsoever, not even a great user experience.</p>

<p>I hate it when they start branding their product with “Made by Indonesian”. Who cares if the product does not even fulfil the people’s needs?</p>

<p>Let’s take an example of an education product, there’s already a successful startup selling e-learning, our product doesn’t even have a smoother or better interface, in fact, it’s slower and has less content.</p>

<p>Even when I was tasked to build a logistics product, the goal was to integrate with as many providers as possible. And the development process was driven by customer feedback. Every feedback, we just took it and implemented it. There were little to no backlogs coming from our research.</p>

<hr />

<p>The HiPPO (highest paid person’s opinion) was notoriously bad!</p>

<p>My team and I built a product for three years long and when the leader swapped, they wanted us to rewrite the product from scratch just because the number of concurrent requests was too low to their standard.</p>

<p>That day, the number of active customers was not even bigger than the number of requests that could be handled. Even we hadn’t scaled the server as it was not required with the current user base.</p>

<h2 id="poor-talent-management">Poor Talent Management</h2>

<p>The company has pools of great talent from all over the country, yet they do not place people in the right positions.</p>

<p>If you are not familiar with how management trainees are recruited, it’s common in Indonesia for management trainees to apply for the position while also acknowledging that they are ready to be positioned anywhere in Indonesia in any available role.</p>

<p>Someone could be a top engineering graduate from an overseas university but be tasked to work as a sales officer, which is not their area of expertise.</p>

<p>Upon the final announcement, people might know they got the job, but they still do not know where they will work or in which field. They will only find this out after their probation period ends.</p>

<p>You can’t appeal this decision, but you can choose to forfeit your position if you can pay the penalty.</p>

<p>It was mind boggling. Instead of listing all vacant positions and the required skills before recruiting, they recruit first and then place people in whichever positions are vacant. Granted, some people do get fitting positions, but there are still wasted potentials.</p>

<p>This was the case with permanent hires, who are mostly fresh graduates.</p>

<hr />

<p>As for experienced hires, the company has no idea how to recruit them.</p>

<p>The HR just leaves the process to the software development division. In turn, the software development division leaves the process to the employees.</p>

<p>The employees who have no idea how to recruit people will do the interview with a list of questions to ask, then score them.</p>

<p>How do they score them? Just as much as they see fits, because there were no repercussions if the hire turns out to be a failed hire.</p>

<p>I have been virtually screaming to the management about this weak point, telling them that this is not the proper way to conduct interviews.</p>

<p>The bar was so low and the scoring criteria differ from each interviewer causing unfair judgment. They responded by renewing the interview questions. That’s all.</p>

<hr />

<p>The experienced hires are to be contracted for five years at max, the contracts are renewed annually.</p>

<p>After that, a loophole will be used to hire the said person from a subsidiary with a potentially lower wage.</p>

<p>Now, who wants to work at the same place, with the same development process, while being paid lower?</p>

<p>Build a better recruitment process. Put the bar higher. Pay professional headhunters if necessary. Hire people as permanent employees, then pay them a proper wage.</p>

<p>It’s not hard, right?</p>

<h2 id="too-big-to-fail">Too Big To Fail?</h2>

<p>This kind of confidence is what kills the company.</p>

<p>I knew back then that it was my time to leave my “perfect dream job”.</p>

<p>I knew that the company’s initiative was doomed to fail.</p>

<p>I thought it was funny when the company wanted to evaluate people by the number of their git commits, turns out they were not joking.</p>

<p>Last time I heard they stopped recruiting people and stopped renewing contracts. The rules got stricter, people can’t have side-jobs (even if it’s one you do on weekends or after office hours). Remote working was shifted to 3 days of work from the office. Even people now need to submit work timesheets every month.</p>

<p>Failing to do all those rules might lead to contract termination.</p>

<p>Gosh! I can only wish for the best for them.</p>

<hr />

<p>Photo by <a href="https://unsplash.com/@storybyphil?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash">Phil Desforges on Unsplash</a></p>]]></content><author><name>Made Indra</name></author><category term="Technology" /><summary type="html"><![CDATA[This is a story of a corporation aiming to transform into a digital company. Despite investmenting a big sum in new technology and hiring new talents, their efforts are undermined by outdated practices.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://madeindra.dev/assets/images/2024-09-16-too-big-too-fail.webp" /><media:content medium="image" url="https://madeindra.dev/assets/images/2024-09-16-too-big-too-fail.webp" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>